#!/usr/bin/env python
import clingo
import argparse
import time

start_time = time.time()

# GLOBAL PARAMS:
__version__ = "0.0.3"
k = 0
clingo_output = False
dictionary = False
debug = False
bot_atoms = 0
tot_atoms = 0
prg = clingo.Control(['-Wno-atom-undefined'])

def truthValueToString(val):
    if val==True: return "1"
    elif val==False: return "0"
    elif val==None: return "⊥"

class Propagator:

    def init(self, init):
        init.check_mode = clingo.PropagatorCheckMode.Fixpoint
        self.solver_literals = []
        self.symbols = []

        for atom in init.symbolic_atoms:
            init.add_watch(init.solver_literal(atom.literal))
            self.solver_literals.append(init.solver_literal(atom.literal))
            self.symbols.append(atom.symbol)
            if dictionary: print(atom.symbol,"has solver literal",init.solver_literal(atom.literal))
        

    def check(self,ctl):
        global bot_atoms
        global tot_atoms

        if debug: print("Current depth = ", ctl.assignment.decision_level-1)

        if (ctl.assignment.decision_level == k+1) or (ctl.assignment.is_total):
            
            print("Valuation found:")
            for i in range(len(self.solver_literals)):
                truth_value = truthValueToString(ctl.assignment.value(self.solver_literals[i]))
                if truth_value=="⊥": bot_atoms = bot_atoms + 1
                tot_atoms = tot_atoms + 1

                if (not clingo_output): print("V("+str(self.symbols[i])+") = "+truth_value)
                else:
                    if ( truth_value=="1" ): print(str(self.symbols[i]),end=" ")
                    elif ( truth_value=="⊥" ): print("?"+str(self.symbols[i]),end=" ")

            prg.interrupt()

if __name__=="__main__":
    
    parser = argparse.ArgumentParser()
    parser.add_argument("file", type=str, help="path to lp file")
    parser.add_argument("-k", "--depth", type=int, help="depth of reasoner (default=0)", default=0)
    parser.add_argument("-o", "--clingo-output", help="enables clingo-style output", action="store_true")
    parser.add_argument("--dictionary", help="display the dictionary", action="store_true")
    parser.add_argument("--debug", help="display debug information", action="store_true")
    args = parser.parse_args()
    k = args.depth
    clingo_output = args.clingo_output
    if args.debug: DEBUG = True
    if args.dictionary: DICTIONARY = True
    
    print("k-lingo version",__version__)
    print("Reading from",args.file)
    print("Solving with k =",args.depth,"...\n")
    
    # ---------------------------------------
    
    prg.register_propagator(Propagator())
    prg.load(args.file)
    prg.ground([("base", [])])
    solve_result = prg.solve(on_model=lambda m: None)
    if solve_result.unsatisfiable:
        print("\nUNSATISFIABLE")
    else:
        print("\n"+str(k)+"-DEPTH SATISFIABLE\n\nAtoms        : "+str(tot_atoms)+"\nBottoms      : "+str(bot_atoms)+"\nTime         : {:.2f}".format(time.time() - start_time)+"s")